// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ProfileResponse
    {
        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("platformInfo")]
        public PlatformInfo PlatformInfo { get; set; }

        [JsonProperty("userInfo")]
        public UserInfo UserInfo { get; set; }

        [JsonProperty("metadata")]
        public DataMetadata Metadata { get; set; }

        [JsonProperty("segments")]
        public Segment[] Segments { get; set; }

        [JsonProperty("availableSegments")]
        public AvailableSegment[] AvailableSegments { get; set; }

        [JsonProperty("expiryDate")]
        public DateTimeOffset ExpiryDate { get; set; }
    }

    public partial class AvailableSegment
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("attributes")]
        public MetadataClass Attributes { get; set; }

        [JsonProperty("metadata")]
        public MetadataClass Metadata { get; set; }
    }

    public partial class MetadataClass
    {
    }

    public partial class DataMetadata
    {
        [JsonProperty("currentSeason")]
        public long CurrentSeason { get; set; }

        [JsonProperty("activeLegend")]
        public string ActiveLegend { get; set; }

        [JsonProperty("activeLegendName")]
        public string ActiveLegendName { get; set; }

        [JsonProperty("activeLegendStats")]
        public string[] ActiveLegendStats { get; set; }
    }

    public partial class PlatformInfo
    {
        [JsonProperty("platformSlug")]
        public string PlatformSlug { get; set; }

        [JsonProperty("platformUserId")]
        public string PlatformUserId { get; set; }

        [JsonProperty("platformUserHandle")]
        public string PlatformUserHandle { get; set; }

        [JsonProperty("platformUserIdentifier")]
        public string PlatformUserIdentifier { get; set; }

        [JsonProperty("avatarUrl")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("additionalParameters")]
        public object AdditionalParameters { get; set; }
    }

    public partial class Segment
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("attributes")]
        public SegmentAttributes Attributes { get; set; }

        [JsonProperty("metadata")]
        public SegmentMetadata Metadata { get; set; }

        [JsonProperty("expiryDate")]
        public DateTimeOffset ExpiryDate { get; set; }

        [JsonProperty("stats")]
        public Stats Stats { get; set; }
    }

    public partial class SegmentAttributes
    {
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }
    }

    public partial class SegmentMetadata
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("imageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ImageUrl { get; set; }

        [JsonProperty("tallImageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri TallImageUrl { get; set; }

        [JsonProperty("bgImageUrl", NullValueHandling = NullValueHandling.Ignore)]
        public Uri BgImageUrl { get; set; }

        [JsonProperty("isActive", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsActive { get; set; }
    }

    public partial class Stats
    {
        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked Level { get; set; }

        [JsonProperty("kills", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked Kills { get; set; }

        [JsonProperty("winningKills", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked WinningKills { get; set; }

        [JsonProperty("killsAsKillLeader", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked KillsAsKillLeader { get; set; }

        [JsonProperty("revives", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked Revives { get; set; }

        [JsonProperty("rankScore", NullValueHandling = NullValueHandling.Ignore)]
        public RankScore RankScore { get; set; }

        [JsonProperty("season6Wins", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked Season6Wins { get; set; }

        [JsonProperty("smokeGrenadeEnemiesHit", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked SmokeGrenadeEnemiesHit { get; set; }

        [JsonProperty("doubleTimeDistance", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked DoubleTimeDistance { get; set; }

        [JsonProperty("domeDamageBlocked", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked DomeDamageBlocked { get; set; }

        [JsonProperty("eyeEnemiesScanned", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked EyeEnemiesScanned { get; set; }

        [JsonProperty("eyeTrapsScanned", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked EyeTrapsScanned { get; set; }

        [JsonProperty("riftsSquadmatesPhased", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked RiftsSquadmatesPhased { get; set; }

        [JsonProperty("phaseWalkTime", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked PhaseWalkTime { get; set; }

        [JsonProperty("jumpPadAlliesLaunched", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked JumpPadAlliesLaunched { get; set; }

        [JsonProperty("passiveHealthRegenerated", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked PassiveHealthRegenerated { get; set; }

        [JsonProperty("passiveEnemiesScanned", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked PassiveEnemiesScanned { get; set; }

        [JsonProperty("ultimateShieldDamage", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked UltimateShieldDamage { get; set; }

        [JsonProperty("ultimateTrapsDestroyed", NullValueHandling = NullValueHandling.Ignore)]
        public DomeDamageBlocked UltimateTrapsDestroyed { get; set; }
    }

    public partial class DomeDamageBlocked
    {
        [JsonProperty("rank")]
        public object Rank { get; set; }

        [JsonProperty("percentile")]
        public long Percentile { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("displayCategory")]
        public DisplayCategory DisplayCategory { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("metadata")]
        public MetadataClass Metadata { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("displayValue")]
        public string DisplayValue { get; set; }

        [JsonProperty("displayType")]
        public DisplayType DisplayType { get; set; }
    }

    public partial class RankScore
    {
        [JsonProperty("rank")]
        public object Rank { get; set; }

        [JsonProperty("percentile")]
        public object Percentile { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("displayCategory")]
        public DisplayCategory DisplayCategory { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("metadata")]
        public RankScoreMetadata Metadata { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("displayValue")]
        public string DisplayValue { get; set; }

        [JsonProperty("displayType")]
        public DisplayType DisplayType { get; set; }
    }

    public partial class RankScoreMetadata
    {
        [JsonProperty("iconUrl")]
        public Uri IconUrl { get; set; }

        [JsonProperty("rankName")]
        public string RankName { get; set; }
    }

    public partial class UserInfo
    {
        [JsonProperty("userId")]
        public object UserId { get; set; }

        [JsonProperty("isPremium")]
        public bool IsPremium { get; set; }

        [JsonProperty("isVerified")]
        public bool IsVerified { get; set; }

        [JsonProperty("isInfluencer")]
        public bool IsInfluencer { get; set; }

        [JsonProperty("isPartner")]
        public bool IsPartner { get; set; }

        [JsonProperty("countryCode")]
        public object CountryCode { get; set; }

        [JsonProperty("customAvatarUrl")]
        public object CustomAvatarUrl { get; set; }

        [JsonProperty("customHeroUrl")]
        public object CustomHeroUrl { get; set; }

        [JsonProperty("socialAccounts")]
        public object[] SocialAccounts { get; set; }

        [JsonProperty("pageviews")]
        public long Pageviews { get; set; }

        [JsonProperty("isSuspicious")]
        public object IsSuspicious { get; set; }
    }

    public enum DisplayCategory { Combat, Game };

    public enum DisplayType { Unspecified };

    public partial class ProfileResponse
    {
        public static ProfileResponse FromJson(string json) => JsonConvert.DeserializeObject<ProfileResponse>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ProfileResponse self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                DisplayCategoryConverter.Singleton,
                DisplayTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DisplayCategoryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DisplayCategory) || t == typeof(DisplayCategory?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Combat":
                    return DisplayCategory.Combat;
                case "Game":
                    return DisplayCategory.Game;
            }
            throw new Exception("Cannot unmarshal type DisplayCategory");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DisplayCategory)untypedValue;
            switch (value)
            {
                case DisplayCategory.Combat:
                    serializer.Serialize(writer, "Combat");
                    return;
                case DisplayCategory.Game:
                    serializer.Serialize(writer, "Game");
                    return;
            }
            throw new Exception("Cannot marshal type DisplayCategory");
        }

        public static readonly DisplayCategoryConverter Singleton = new DisplayCategoryConverter();
    }

    internal class DisplayTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DisplayType) || t == typeof(DisplayType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "Unspecified")
            {
                return DisplayType.Unspecified;
            }
            throw new Exception("Cannot unmarshal type DisplayType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DisplayType)untypedValue;
            if (value == DisplayType.Unspecified)
            {
                serializer.Serialize(writer, "Unspecified");
                return;
            }
            throw new Exception("Cannot marshal type DisplayType");
        }

        public static readonly DisplayTypeConverter Singleton = new DisplayTypeConverter();
    }
}
